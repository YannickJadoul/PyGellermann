name: Packaging

on:
  push:
    branches:
      - main
      - stable
      - docs
      - actions*
    tags:
      - v*
  workflow_dispatch:

jobs:
  build:
    name: Build wheel and sdist
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          filter: tree:0

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build check-manifest

      - name: Run check-manifest
        run: |
          python -m check_manifest

      - name: Build
        run: |
          python -m build

      - name: Upload built packages
        uses: actions/upload-artifact@v4
        with:
          name: packages
          path: dist/*
          if-no-files-found: error

  pyinstaller:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    name: PyInstaller â€¢ ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          filter: tree:0

      - name: Set up Python 3.13
        if: runner.os != 'Linux'
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Start manylinux container
        if: runner.os == 'Linux'
        run: |
          docker run --rm -d -i -v "$GITHUB_WORKSPACE:/host" -w "/host" --name=manylinux quay.io/pypa/manylinux_2_28_x86_64:latest
          MANYLINUX_PATH=$(docker exec manylinux bash -c 'echo "$PATH"')
          echo "RUN_PREFIX=eval docker exec --env \"PATH=/opt/python/cp313-cp313/bin:$MANYLINUX_PATH\" manylinux" >> $GITHUB_ENV

      - name: Install package
        shell: bash
        run: |
          $RUN_PREFIX env
          $RUN_PREFIX which python
          $RUN_PREFIX python --version
          $RUN_PREFIX python -m pip install --upgrade pip
          $RUN_PREFIX pip install .
          echo "PYGELLERMANN_VERSION=$($RUN_PREFIX python -c 'import pygellermann; print(pygellermann.__version__)')" >> $GITHUB_ENV

      - name: Install PyInstaller
        shell: bash
        run: |
          $RUN_PREFIX pip install pyinstaller

      - name: Run PyInstaller
        shell: bash
        run: |
          $RUN_PREFIX pyinstaller --name PyGellermann --windowed --onefile scripts/pygellermann-gui.py
          EXT="${{runner.os == 'Windows' && '.exe' || '' }}"
          $RUN_PREFIX mv dist/PyGellermann$EXT dist/PyGellermann-$PYGELLERMANN_VERSION-${{ runner.os }}$EXT

      - name: Package macOS App Bundle to DMG
        if: runner.os == 'macOS'
        run: |
          brew install create-dmg
          curl -O https://raw.githubusercontent.com/dmgbuild/dmgbuild/main/src/dmgbuild/resources/builtin-arrow.tiff
          create-dmg \
            --volname "PyGellermann" \
            --background "builtin-arrow.tiff" \
            --window-size 640 280 \
            --icon-size 128 \
            --icon "PyGellermann.app" 140 120 \
            --hide-extension "PyGellermann.app" \
            --app-drop-link 500 120 \
            "dist/PyGellermann.dmg" \
            "dist/PyGellermann.app/"
          rm -r dist/PyGellermann.app
          mv dist/PyGellermann.dmg dist/PyGellermann-$PYGELLERMANN_VERSION-${{ runner.os }}.dmg

      - name: Upload built executable
        uses: actions/upload-artifact@v4
        with:
          name: executable-${{ runner.os }}
          path: dist/PyGellermann-*
          if-no-files-found: error

      - name: Stop manylinux container
        if: runner.os == 'Linux'
        run: |
          docker stop manylinux -t 0

  create_release:
    name: Create release
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag' && startsWith(github.ref_name, 'v')
    needs: [build, pyinstaller]

    permissions:
      contents: write

    steps:
      - name: Collect wheel, sdist, and executables
        uses: actions/download-artifact@v5
        with:
          path: dist
          merge-multiple: true

      - name: Upload wheel, sdist, and executables to release
        uses: ncipollo/release-action@v1
        with:
          name: ${{ github.ref_name }}
          draft: true
          artifacts: dist/*
          token: ${{ secrets.GITHUB_TOKEN }}
